import streamlit as st
from set_params import load_page_setting

st.set_page_config(
    page_title="Baseline –º–æ–¥–µ–ª—å",
    page_icon="üöÖ"
)

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ–Ω–∞ —Å—Ç–∏–ª–µ–π –∏ —Ç.–¥.
load_page_setting()

st.sidebar.header("Baseline –º–æ–¥–µ–ª—å")
st.sidebar.success("–û–±—É—á–µ–Ω–∏–µ –¥–≤—É—Ö –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

st.markdown("""
# –°–æ–∑–¥–∞–Ω–∏–µ Baseline –º–æ–¥–µ–ª–∏

–ó–∞ baseline –≤–æ–∑—å–º–µ–º RandomForestClassifier. –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–∞–µ—Å—Ç–≤–æ –±—É–¥–µ–º –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ

""")

st.markdown(
"""
–ü–µ—Ä–≤—ã–π baseline. –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–ª–∏—Å—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç—Ä–∏–∫–∏ f1_macro= 0.6825
""" 
)

st.code("""
# —Ä–∞–∑–¥–µ–ª–∏–º –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ 2 –≤—ã–±–æ—Ä–∫–∏ (train val)

data_base = data_eda_1v1_drop.copy()

x_train = data_base.drop('–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)', axis = 1)
y_train = data_base['–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)']

x_train_baseline, x_val_baseline, y_train_baseline, y_val_baseline = train_test_split(
    x_train, y_train,
    test_size = 0.10, shuffle = True,
    random_state = RANDOM_STATE)

model = RandomForestClassifier(random_state = RANDOM_STATE)
model.fit(x_train_baseline, y_train_baseline)
        
predict = model.predict(x_val_baseline)
print(f'f1 score —É baseline –º–æ–¥–µ–ª–∏ = {f1_score(y_val_baseline, predict, average = "macro")}')

f1 score —É baseline –º–æ–¥–µ–ª–∏ = 0.6825396825396826 """, line_numbers = True)

st.markdown(
"""
–í—Ç–æ—Ä–æ–π baseline. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ pipeline. –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç—Ä–∏–∫–∏ f1_macro= 0.712
""" 
)

st.code("""# —Ä–∞–∑–¥–µ–ª–∏–º –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ 2 –≤—ã–±–æ—Ä–∫–∏ (train val)

# —Å–¥–µ–ª–∞–µ–º –∫–æ–ø–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
data_base = data_eda_1v1_drop.copy()

x_train = data_base.drop('–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)', axis = 1)
y_train = data_base['–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)']

x_train_baseline, x_val_baseline, y_train_baseline, y_val_baseline = train_test_split(
    x_train, y_train,
    test_size = 0.10, shuffle = True,
    random_state = RANDOM_STATE)

x_train_baseline = pd.DataFrame(pipeline_transform.transform(x_train_baseline))
x_train_baseline.columns = x_train_save_column

x_val_baseline = pd.DataFrame(pipeline_transform.transform(x_val_baseline))
x_val_baseline.columns = x_train_save_column

model = RandomForestClassifier(random_state = RANDOM_STATE)
model.fit(x_train_baseline, y_train_baseline)
        
predict = model.predict(x_val_baseline)
print(f'f1 score —É baseline –º–æ–¥–µ–ª–∏ (pipeline encoder)= {f1_score(y_val_baseline, predict, average = "macro")}')

f1 score —É baseline –º–æ–¥–µ–ª–∏ (pipeline encoder) = 0.7117117117117118 """, line_numbers = True)


st.markdown(
"""
### –í—ã–≤–æ–¥—ã
–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞ –±—ã–ª–æ –≤—è–≤–ª–µ–Ω–æ, —á—Ç–æ baseline –¥–∞—ë—Ç –ª—É—á—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏ f1 –º–∞–∫—Ä–æ = 0.71 –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
"""
)