import streamlit as st
from set_params import load_page_setting
from base_funct import transform_df_base, DataTransformer
import pandas as pd
from catboost import CatBoostClassifier
import os

st.set_page_config(
    page_title="MLOps",
    page_icon="üîå"
)

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ–Ω–∞ —Å—Ç–∏–ª–µ–π –∏ —Ç.–¥.
load_page_setting()


st.sidebar.header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")
st.sidebar.success("–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–≤–æ–∞–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")
st.sidebar.success("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")

st.markdown("""
# –î–µ–ø–ª–æ–π –º–æ–¥–µ–ª–∏
            
–ú–æ–¥–µ–ª—å –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç excel —Ñ–∞–π–ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–¥–∞—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –µ—Å—Ç—å –ª–∏ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–∏–∞–±–µ—Ç –∏–ª–∏ –Ω–µ—Ç

""")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
df, test = transform_df_base()
transformer_class = DataTransformer()
transformer_class.fit(df, columns_to_exclude=['–ù–∞—Ç—Ä–∏–π', '–ö–∞–ª–∏–π', '–ú–æ—á–µ–≤–∏–Ω–∞', '–û–±—â–∏–π –±–∏–ª–∏—Ä—É–±–∏–Ω'])
transform_test = transformer_class.transform(test)

df = pd.concat([df, transform_test])

x_train_all = df.drop('–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)', axis = 1)
y_train_all = df['–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)']

# –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã catboost
best_params = {'iterations': 437,
 'depth': 2,
 'learning_rate': 0.059429953553017466,
 'l2_leaf_reg': 2.0210035460360274}

model_best = CatBoostClassifier(**best_params, verbose=0)
model_best.fit(x_train_all, y_train_all)

# –¥–µ–ø–ª–æ–π –º–æ–¥–µ–ª–∏

col1, col2 = st.columns([1,1])

col1.markdown(
"""
–í–æ—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–∫–∞—á–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ –Ω–∞–º –≤ –ø–æ–ª–µ –Ω–∏–∂–µ
"""
)

file_path = './streamlit_app/data/–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.xlsx'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def load_file(uploaded_file):
    if uploaded_file is not None:
        try:
            # –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ DataFrame
            data_d = pd.read_excel(uploaded_file)
            st.write("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return data_d
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
def download_file(file_path):
    try:
        with open(file_path, 'rb') as f:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª",
                data=f,
                file_name=os.path.basename(file_path),
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# –°–µ–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
st.subheader('–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Excel')
download_file(file_path)

# –°–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.subheader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel')
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx"])

data_r = load_file(uploaded_file)

try:
    if uploaded_file is not None:
        st.markdown("""–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ –¥–∏–∞–±–µ—Ç–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞""")
        st.text(model_best.predict_proba(pd.DataFrame(data_r))[0][1])
except:
    pass





