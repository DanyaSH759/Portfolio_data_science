import streamlit as st
from set_params import load_page_setting
import pandas as pd
from io import StringIO

st.set_page_config(
    page_title="Load data",
    page_icon="üìà"
)

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ–Ω–∞ —Å—Ç–∏–ª–µ–π –∏ —Ç.–¥.
load_page_setting()

st.markdown("# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.success("–°—Ç—ç–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
st.sidebar.success("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")

st.markdown(
"""
### –ù–∞—à —Å—Ç—ç–∫ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ–ª–∏:
"""
)

with st.expander("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"):
    st.code("""# –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import optuna

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

from phik.report import plot_correlation_matrix

from sklearn.model_selection import (ShuffleSplit, train_test_split, cross_val_score)
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (f1_score, confusion_matrix)
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA

from catboost import CatBoostClassifier

import ipywidgets as widgets
from IPython.display import display, clear_output

from mlxtend.plotting import plot_decision_regions
import shap
from lime import lime_tabular

import warnings
warnings.filterwarnings('ignore')""", line_numbers = True)


st.markdown(
"""
### –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
"""
)

st.markdown(
"""
–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∏–º–µ–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –∫–æ–ª–æ–Ω–æ–∫.
–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ EDA –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
"""
)

# –≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_excel('./diabetes_ds.xlsx', index_col=0)

# –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–≤–æ–¥–∞ df.info()
buffer = StringIO()
df.info(buf=buffer, verbose = True, show_counts = True)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É—Ñ–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º —Å –ø–æ–º–æ—â—å—é st.text()
info_str = buffer.getvalue()

with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
    st.text(info_str)
    st.dataframe(df.head())
    st.dataframe(df.tail())

st.markdown(
"""
### –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–¥–µ–ª—è–µ–º –∏ –¥–µ–ª–∏–º –≤—ã–±–æ—Ä–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é.
"""
)

with st.expander("–î–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–µ–π–Ω –∏ —Ç–µ—Å—Ç"):
    st.code(
        """
# —É–¥–∞–ª–∏–º –æ—à–∏–±–æ—á–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ—á–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç–∞—Å—Ç–µ
data = data.iloc[:-2]

# –£–¥–∞–ª–∏–º —Å—Ä–∞–∑—É —Å—Ç—Ä–æ—á–∫—É —Å –ø—É—Å—Ç—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º
data.dropna(subset=['–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (–ï–°–¢–¨\–ù–ï–¢)'], inplace=True)

# –û—Ç–¥–µ–ª–∏–º –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ç–µ—Å—Ç–∞. –¢–µ—Å—Ç –æ—Ç–ª–æ–∂–∏–º –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
data, test = train_test_split(data, test_size = 0.30, shuffle = True, random_state = RANDOM_STATE)

"""
    )

st.markdown(
"""
### –í—ã–≤–æ–¥—ã

–ó–∞–≥—Ä—É–∂–µ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –¥–∞—Ç–∞—Å–µ—Ç. –í –¥–∞—Ç–∞—Å–µ—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤, —Å–∞–º –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 107 –∫–æ–ª–æ–Ω–æ–∫ –∏ 484 —Å—Ç—Ä–æ—á–µ–∫. –û—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–¥–µ–ª–µ–Ω–∞ —á–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

"""
)
